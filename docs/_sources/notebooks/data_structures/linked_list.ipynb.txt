{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linked list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-01-15T14:07:43.793215Z",
     "start_time": "2018-01-15T14:07:43.786197Z"
    }
   },
   "outputs": [],
   "source": [
    "class Node(object):\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"{} -> {}\".format(self.data, self.next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-01-15T14:07:43.841331Z",
     "start_time": "2018-01-15T14:07:43.795504Z"
    }
   },
   "outputs": [],
   "source": [
    "class LinkedList(object):\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "        self.tail = None\n",
    "        self.counter = 0\n",
    "\n",
    "    def __iter__(self):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            print(current.data)\n",
    "            val = current.data\n",
    "            current = current.next\n",
    "            yield val\n",
    "\n",
    "    def push_front(self, data):\n",
    "        if data is None:\n",
    "            return False\n",
    "        node = Node(data)\n",
    "        current = self.head\n",
    "        if self.head:\n",
    "            while current.next:\n",
    "                current = current.next\n",
    "            current.next = node\n",
    "        else:\n",
    "            self.head = node\n",
    "            self.tail = node\n",
    "        self.head = node\n",
    "        self.counter += 1\n",
    "\n",
    "    def push_back(self, data):\n",
    "        node = Node(data)\n",
    "        current = self.head\n",
    "        if current is None:\n",
    "            current.head = node\n",
    "        else:\n",
    "            while current.next is not None:\n",
    "                current = current.next\n",
    "            current.next = node"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-01-15T14:07:43.847984Z",
     "start_time": "2018-01-15T14:07:43.843329Z"
    }
   },
   "outputs": [],
   "source": [
    "ll = LinkedList()\n",
    "ll.push_front(10)\n",
    "ll.push_front(2)\n",
    "ll.push_front(3)\n",
    "ll.push_front(4)\n",
    "ll.push_back(50)\n",
    "ll.push_front(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-01-15T14:07:43.855399Z",
     "start_time": "2018-01-15T14:07:43.850619Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count: \t 5\n",
      "Head: \t 100\n",
      "100\n",
      "Iter: \t [100]\n"
     ]
    }
   ],
   "source": [
    "print(\"Count: \\t\", ll.counter)\n",
    "print(\"Head: \\t\", ll.head.data)\n",
    "print(\"Iter: \\t\", [i for i in ll])"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
